{"version":3,"sources":["components/AddTask.jsx","services/APIHelper.js","components/indicators.js","components/scene.jsx","App.jsx","reportWebVitals.ts","GlobalStyle.js","index.tsx","../node_modules/typescript/lib sync"],"names":["React","Component","API_URL","nextId","a","axios","get","obj","getScene","Indicators","props","text","this","lives","light","darkness","glory","counter","pictures","randEvents","curEvents","setBackground","backgroundImage","Scene","getState","console","log","state","notes","scene","background","assistant","getStateForAssistant","createAssistant","on","event","action","dispatchAssistantAction","response","data","setState","read","item_selector","items","type","choice","add_note","sendData","action_id","options","forEach","item","index","id","moveTo","curImg","push","string","reverse","pic","length","Math","floor","random","then","img","setBackgrounds","bonus","offsetS","offsetM","offsetL","offsetXL","sizeS","sizeM","sizeL","sizeXL","map","Button","style","marginBottom","width","stretch","size","onClick","className","Spinner","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","gradient","ThemeStyle","darkSber","GlobalStyle","ReactDOM","render","StrictMode","Device","document","getElementById","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.585e87df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../App.css\";\r\n\r\n\r\nexport class AddTask extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      note: '',\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { onAdd } = this.props;\r\n\r\n    return (\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          onAdd(this.state.note);\r\n          this.setState({\r\n            note: '',\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          className   = \"add-task\"\r\n          type        = \"text\"\r\n          placeholder = \"Add Note\"\r\n          value       = { this.state.note }\r\n          onChange    = {({ target: { value } }) => this.setState({\r\n            note: value,\r\n          })}\r\n          required\r\n          autoFocus\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://magicianapp.herokuapp.com\";\r\n//const API_URL = \"http://localhost:3000\";\r\n\r\nasync function getScene(nextId) {\r\n    const obj = await axios.get(`${API_URL}/nodes/${nextId}`);\r\n    return obj;\r\n}\r\n\r\nexport default getScene;\r\nexport { API_URL };","import React from \"react\";\r\n\r\nimport { Row } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Toast } from '@sberdevices/plasma-ui';\r\nimport { setConstantValue } from \"typescript\";\r\n\r\nclass Indicators extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Toast text={`Количество жизней: ${this.props.lives}💖`} />\r\n                <Toast text={`Мана света: ${this.props.light}☀`} />\r\n                <Toast text={`Мана тьмы: ${this.props.darkness}💀`} />\r\n                <Toast text={`Слава: ${this.props.glory}🎺`} />\r\n            </Row>\r\n        );\r\n    }\r\n  }\r\n\r\nexport default Indicators;","import {TaskList} from '../pages/TaskList';\r\nimport getScene, { API_URL } from '../services/APIHelper.js'\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\n\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes';\r\nimport { Button } from '@sberdevices/ui/components/Button/Button';\r\nimport { Container, Row, Col } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Image } from '@sberdevices/ui/components/Image/Image';\r\nimport { Spinner } from '@sberdevices/plasma-ui/components/Spinner'\r\nimport { Headline1 } from '@sberdevices/plasma-ui';\r\n\r\nimport Indicators from './indicators'\r\nimport './scene.css';\r\n\r\nconst YOUDIED = 99999;\r\n\r\nlet lives = 3;\r\nlet glory = 50;\r\nlet light = 50;\r\nlet darkness = 50;\r\n\r\nlet counter = 0;\r\nlet currentId = 0;\r\nlet pictures = [];\r\n\r\nlet randEvents = [100];\r\nlet curEvents = [100];\r\n\r\nconst setBackground = {\r\n  backgroundImage: ''\r\n}\r\n\r\nconst initializeAssistant = (getState/*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\n\r\nconst fetchedData = async (id) => {\r\n  return await getScene(id);\r\n}\r\n\r\nexport class Scene extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('constructor');\r\n\r\n    //this.value = 0;\r\n\r\n    this.state = {\r\n      notes: [],\r\n      scene:           null,\r\n      backgroundImage: { background: '' }\r\n    };\r\n\r\n    this.assistant = initializeAssistant(() => this.getStateForAssistant() );\r\n    this.assistant.on(\"data\", (event/*: any*/) => {\r\n      console.log(`assistant.on(data)`, event);\r\n      const { action } = event\r\n      this.dispatchAssistantAction(action);\r\n    });\r\n    this.assistant.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const response = await getScene(currentId);\r\n    console.log(response);\r\n    const { data } = response;\r\n    this.setState({ scene: data });\r\n    this.read();\r\n  }\r\n\r\n  getStateForAssistant () {\r\n    console.log('getStateForAssistant: this.state:', this.state)\r\n    const state = {\r\n      item_selector: {\r\n        items: { text : this.state.scene.text }\r\n      }\r\n    };\r\n\r\n    console.log('getStateForAssistant: state:', state)\r\n    return state;\r\n  }\r\n\r\n  dispatchAssistantAction (action) {\r\n    console.log('dispatchAssistantAction', action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case 'add_note':\r\n          console.log('add_note', action, 'action.choice = ', action.choice);\r\n          return this.add_note(action);\r\n\r\n        \r\n        case 'read':\r\n          return this.read();\r\n\r\n        /*\r\n        case 'delete_note':\r\n          return this.delete_note(action);\r\n        default:\r\n          throw new Error();\r\n        */\r\n      }\r\n    }\r\n  }\r\n\r\n  read () {\r\n    this.assistant.sendData( { action : { action_id : 'read' } } );\r\n  }\r\n\r\n  add_note (action) {\r\n    let choice = action.choice;\r\n    console.log(choice);\r\n\r\n    if (choice == 'один' || choice == 'первый' || choice == 'первое' || choice == 'первую') {\r\n      choice = 1;\r\n    }\r\n    if (action.choice == 'два' || choice == 'второй'|| choice == 'второе' || choice == 'вторую') {\r\n      choice = 2;\r\n    }\r\n    if (action.choice == 'три' || choice == 'третий'|| choice == 'третье' || choice == 'третью') {\r\n      choice = 3;\r\n    }\r\n    if (action.choice == 'четыре' || choice == 'четвертый'|| choice == 'четвертое' || choice == 'четвертую') {\r\n      choice = 4;\r\n    }\r\n\r\n    this.state.scene.options.forEach((item, index) => {\r\n      console.log('index = ', index, 'choice = ', choice);\r\n      if ((item.text === choice) || (index + 1 === choice)) {\r\n        console.log('movedTo', item.id);\r\n        this.moveTo(item.id);\r\n      }\r\n    })\r\n    //return this.state;\r\n  }\r\n\r\n  /*add_note (action) {\r\n    console.log('add_note', action);\r\n    this.setState({\r\n      notes: [\r\n        ...this.state.notes,\r\n        {\r\n          id:        Math.random().toString(36).substring(7),\r\n          title:     action.note,\r\n          completed: false,\r\n        },\r\n      ],\r\n    })\r\n  }*/\r\n\r\n  setBackgrounds (curImg) {\r\n    pictures.push(curImg);\r\n    //debugger;\r\n    let string = ``;\r\n    pictures.reverse();\r\n    pictures.forEach((pic, index) => {\r\n      string = string + `url(${API_URL}/${pic}.png) center no-repeat`;\r\n      if (index < pictures.length - 1){\r\n        string = string + ',';\r\n      }\r\n    });\r\n    //setBackgroundImage({background : string});\r\n    this.setState({ backgroundImage: {background : string}})\r\n    pictures.reverse();\r\n  }\r\n  \r\n  moveTo(nextId) {\r\n    //fetchedData(nextId)\r\n    if ((lives == 0 || light == 0 || darkness == 0 || glory == 0) && this.state.scene.id != YOUDIED ) {\r\n      nextId = YOUDIED;\r\n    }\r\n\r\n    console.log('NEXT IS ', nextId);\r\n\r\n    if (!nextId) {\r\n      nextId = Math.floor(Math.random() * curEvents.length);\r\n      nextId = curEvents[nextId];\r\n    }\r\n\r\n    if ((nextId == 0 || nextId == 1) && this.state.scene.id > 1) {\r\n      setBackground.backgroundImage = '';\r\n      curEvents = randEvents;\r\n      counter = 1;\r\n      lives = 3;\r\n      glory = 50;\r\n      light = 50;\r\n      darkness = 50;\r\n    }\r\n\r\n    getScene(nextId)\r\n      .then((response) => {\r\n        const { data } = response;\r\n        //setScene(data);\r\n        this.setState({ scene: data });\r\n        this.read();\r\n        counter++;\r\n\r\n        if (counter > 0 && data.img) {\r\n          this.setBackgrounds(data.img);\r\n        }\r\n\r\n        console.log('data', data);\r\n\r\n        if (data.bonus) {\r\n          lives += data.bonus.lives;\r\n          light += data.bonus.light;\r\n          darkness += data.bonus.darkness;\r\n          glory += data.bonus.glory;\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n\r\n    /*\r\n    const [scene, setScene] = useState(null);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    const [backgroundImage, setBackgroundImage] = useState({background : ''});\r\n\r\n    const fetchedData = async (id) => {\r\n       return await getScene(id);\r\n    }\r\n    \r\n    useEffect(() => {\r\n       fetchedData(currentId).then((response) => {\r\n           console.log(response);\r\n           const { data } = response;\r\n           setScene(data);\r\n       })\r\n    }, []);\r\n    */\r\n\r\n     const { scene, backgroundImage } = this.state;\r\n\r\n    /*изначально было setBackgroundImage({background : `url(${API_URL}/${curImg}.png) center no-repeat`});*/\r\n\r\n    if (scene) {\r\n      if (scene.options) {\r\n\r\n        if (counter == 0) {\r\n          return (\r\n            < >\r\n              <Col type=\"calc\" offsetS={1} offsetM={2} offsetL={3} offsetXL={4} sizeS={1} sizeM={2} sizeL={3} sizeXL={4} />\r\n              <Headline1> { scene.text } </Headline1>\r\n              {\r\n                scene.options.map((item) => {\r\n                  return (\r\n                    <Row>\r\n                      <Button style={{ marginBottom: '1rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.add_note({choice: item.text}) }>\r\n                        {item.text}\r\n                      </Button>\r\n                    </Row>\r\n                  );\r\n                })\r\n              }\r\n            </>\r\n          );\r\n        }\r\n\r\n        return(\r\n          // <Container styles={darkSber} >\r\n              <Row>\r\n                <Col>\r\n                  <div style={backgroundImage} className = 'img-Wrapper'>\r\n                     {/* <img  src={API_URL + '/' + scene.img + '.png' } height={'450'} width={'450'} /> */}\r\n                  </div>\r\n                 \r\n                <Indicators lives={lives} light={light} darkness={darkness} glory={glory} />\r\n                </Col>\r\n                  <Col type=\"calc\" sizeS={4} sizeM={6} sizeL={6} sizeXL={6}>\r\n                  <Headline1> { scene.text   } </Headline1>\r\n                  {\r\n                    scene.options.map((item) => {\r\n                      return (\r\n                        <Row>\r\n                          <Button style={{ marginBottom: '1rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.add_note({choice: item.text}) }>\r\n                            {item.text}\r\n                          </Button>\r\n                        </Row>\r\n                      );\r\n                    })\r\n                  }\r\n                  </Col>\r\n          </Row>\r\n            //{ console.log('values: ', lives, ' ', light, ' ', darkness, ' ', glory) }\r\n          // </Container>\r\n        );\r\n      }\r\n    } else {\r\n      return () => <Spinner />\r\n    }\r\n  }\r\n}\r\n\r\nexport default Scene;","import React from \"react\";\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\nimport { Container } from '@sberdevices/plasma-ui/components/Grid';\r\n\r\nimport \"./App.css\";\r\nimport Scene from './components/scene';\r\nimport { TaskList } from './pages/TaskList';\r\n\r\n\r\n\r\nexport class App extends React.Component {\r\n\r\n  render() {\r\n    console.log('render');\r\n    return (\r\n      <Container>\r\n\r\n        <Scene />\r\n\r\n      </Container>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","// GlobalStyle.tsx\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeStyle = createGlobalStyle(darkSber);\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeStyle />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './GlobalStyle'; // Тема оформления (цветовая схема)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DeviceThemeProvider>\r\n      <GlobalStyle />\r\n      <App />\r\n    </DeviceThemeProvider>,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 63;"],"sourceRoot":""}