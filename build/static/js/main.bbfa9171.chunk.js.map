{"version":3,"sources":["components/AddTask.jsx","services/APIHelper.js","components/scene.jsx","components/indicators.js","App.jsx","reportWebVitals.ts","GlobalStyle.js","index.tsx","../node_modules/typescript/lib sync"],"names":["React","Component","API_URL","nextId","a","axios","get","obj","getScene","characterID","nodesArr","curNodes","Indicators","props","className","text","this","lives","mana","glory","YOUWIN","counter","pictures","setBackground","backgroundImage","Scene","getState","console","log","state","notes","scene","background","assistant","getStateForAssistant","createAssistant","on","event","type","character","id","action","dispatchAssistantAction","response","data","slice","setState","read","item_selector","items","texts","texta","textj","choice","add_note","sendData","action_id","isChanged","toLowerCase","options","forEach","item","index","moveTo","sendException","curImg","push","string","reverse","pic","length","tmp","Math","floor","random","splice","then","bonus","img","setBackgrounds","offsetS","offsetM","offsetL","offsetXL","sizeS","sizeM","sizeL","sizeXL","neededText","map","Button","style","marginBottom","width","stretch","size","onClick","Spinner","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","gradient","ThemeStyle","darkSber","GlobalStyle","ReactDOM","render","StrictMode","Device","document","getElementById","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.bbfa9171.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../App.css\";\r\n\r\n\r\nexport class AddTask extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      note: '',\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { onAdd } = this.props;\r\n\r\n    return (\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          onAdd(this.state.note);\r\n          this.setState({\r\n            note: '',\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          className   = \"add-task\"\r\n          type        = \"text\"\r\n          placeholder = \"Add Note\"\r\n          value       = { this.state.note }\r\n          onChange    = {({ target: { value } }) => this.setState({\r\n            note: value,\r\n          })}\r\n          required\r\n          autoFocus\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://magicianapp.herokuapp.com\";\r\n// const API_URL = \"http://localhost:3000\";\r\n\r\nasync function getScene(nextId) {\r\n    const obj = await axios.get(`${API_URL}/nodes/${nextId}`);\r\n    return obj;\r\n}\r\n\r\nexport default getScene;\r\nexport { API_URL };","import {TaskList} from '../pages/TaskList';\r\nimport getScene, { API_URL } from '../services/APIHelper.js'\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\n\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes';\r\nimport { Button } from '@sberdevices/ui/components/Button/Button';\r\nimport { Container, Row, Col } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Image } from '@sberdevices/ui/components/Image/Image';\r\nimport { Spinner } from '@sberdevices/plasma-ui/components/Spinner'\r\nimport { Headline1 } from '@sberdevices/plasma-ui';\r\n\r\nimport Indicators from './indicators'\r\nimport './scene.css';\r\nimport './centerButtons.css'\r\nimport './centerText.css'\r\nimport './centerPic.css'\r\nimport { createMethodSignature } from 'typescript';\r\n\r\nconst YOUDIED = 99999;\r\nconst YOUWIN = 100000;\r\n\r\nlet characterID;\r\n\r\nlet lives = 3;\r\nlet mana = 50;\r\nlet glory = 50;\r\n\r\nlet counter = 0;\r\nlet currentId = 0;\r\nlet pictures = [];\r\n\r\nlet nodesArr;\r\nlet curNodes;\r\n\r\nconst setBackground = {\r\n  backgroundImage: ''\r\n}\r\n\r\nconst initializeAssistant = (getState/*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\n\r\nconst fetchedData = async (id) => {\r\n  return await getScene(id);\r\n}\r\n\r\nexport class Scene extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('constructor');\r\n\r\n    //this.value = 0;\r\n\r\n    this.state = {\r\n      notes: [],\r\n      scene:           null,\r\n      backgroundImage: { background: '' }\r\n    };\r\n\r\n    this.assistant = initializeAssistant(() => this.getStateForAssistant() );\r\n    this.assistant.on(\"data\", (event/*: any*/) => {\r\n      switch (event.type) {\r\n        case 'character':\r\n          characterID = event.character.id;\r\n          console.log(\"CHARACTER= \", characterID);\r\n        case 'action':\r\n          console.log(`assistant.on(data)`, event);\r\n          const { action } = event\r\n          this.dispatchAssistantAction(action);\r\n      }\r\n      // console.log(`assistant.on(data)`, event);\r\n      // const { action } = event\r\n      // this.dispatchAssistantAction(action);\r\n    });\r\n    this.assistant.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const response = await getScene(currentId);\r\n    console.log(response);\r\n    const { data } = response;\r\n\r\n    if (data.nodesArr) {\r\n      nodesArr = data.nodesArr;\r\n      console.log('nodesArr', nodesArr);\r\n      curNodes = nodesArr.slice();\r\n    }\r\n\r\n    this.setState({ scene: data });\r\n    this.read();\r\n  }\r\n\r\n  getStateForAssistant () {\r\n    console.log('getStateForAssistant: this.state:', this.state)\r\n    const state = {\r\n      item_selector: {\r\n        items: { \r\n          text : this.state.scene.text, \r\n          texts : this.state.scene.texts,\r\n          texta : this.state.scene.texta,\r\n          textj : this.state.scene.textj,\r\n\r\n         }\r\n      }\r\n    };\r\n\r\n    console.log('getStateForAssistant: state:', state)\r\n    return state;\r\n  }\r\n\r\n  dispatchAssistantAction (action) {\r\n    console.log('dispatchAssistantAction', action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case 'add_note':\r\n          console.log('add_note', action, 'action.choice = ', action.choice);\r\n          return this.add_note(action);\r\n\r\n        \r\n        case 'read':\r\n          return this.read();\r\n\r\n        /*\r\n        case 'delete_note':\r\n          return this.delete_note(action);\r\n        default:\r\n          throw new Error();\r\n        */\r\n      }\r\n    }\r\n  }\r\n\r\n  read () {\r\n    this.assistant.sendData( { action : { action_id : 'read' } } );\r\n  }\r\n\r\n  sendException() {\r\n    this.assistant.sendData( { action : { action_id : 'noMatch' } } );\r\n  }\r\n\r\n  add_note (action) {\r\n    let choice = action.choice;\r\n    let isChanged = false;\r\n\r\n    choice = choice.toLowerCase();\r\n    \r\n    console.log(choice);\r\n\r\n    if (choice == 'один' || choice == 'первый' || choice == 'первое' || choice == 'первую') {\r\n      choice = 1;\r\n    }\r\n    if (action.choice == 'два' || choice == 'второй'|| choice == 'второе' || choice == 'вторую') {\r\n      choice = 2;\r\n    }\r\n    if (action.choice == 'три' || choice == 'третий'|| choice == 'третье' || choice == 'третью') {\r\n      choice = 3;\r\n    }\r\n    if (action.choice == 'четыре' || choice == 'четвертый'|| choice == 'четвертое' || choice == 'четвертую') {\r\n      choice = 4;\r\n    }\r\n\r\n    this.state.scene.options.forEach((item, index) => {\r\n      if ((item.text.toLowerCase() === choice) || (index + 1 === choice)) {\r\n        this.moveTo(item.id);\r\n        isChanged = true;\r\n      }\r\n    })\r\n\r\n    if (!isChanged) {\r\n      this.sendException();\r\n    }\r\n    //return this.state;\r\n  }\r\n\r\n  /*add_note (action) {\r\n    console.log('add_note', action);\r\n    this.setState({\r\n      notes: [\r\n        ...this.state.notes,\r\n        {\r\n          id:        Math.random().toString(36).substring(7),\r\n          title:     action.note,\r\n          completed: false,\r\n        },\r\n      ],\r\n    })\r\n  }*/\r\n\r\n  setBackgrounds (curImg) {\r\n    pictures.push(curImg);\r\n    //debugger;\r\n    let string = ``;\r\n    pictures.reverse();\r\n    pictures.forEach((pic, index) => {\r\n      string = string + `url(${API_URL}/${pic}.png) center no-repeat`;\r\n      if (index < pictures.length - 1){\r\n        string = string + ',';\r\n      }\r\n    });\r\n    //setBackgroundImage({background : string});\r\n    this.setState({ backgroundImage: {background : string}})\r\n    pictures.reverse();\r\n  }\r\n  \r\n  moveTo(nextId) {\r\n    //fetchedData(nextId)\r\n\r\n    if ((lives <= 0 || mana <= 0 || glory <= 0) && this.state.scene.id != YOUDIED ) {\r\n      nextId = YOUDIED;\r\n    }\r\n\r\n    if ((lives > 0 && mana >= 200 && glory >= 200) && this.state.scene.id != YOUWIN ) {\r\n      nextId = YOUWIN;\r\n    }\r\n\r\n    console.log('NEXT IS ', nextId);\r\n    console.log('ARRAY = ', curNodes);\r\n\r\n    if (!nextId) {\r\n\r\n      if (curNodes.length == 0) {\r\n        console.log('NODES ARR = ', nodesArr);\r\n        curNodes = nodesArr.slice();\r\n      }\r\n\r\n      nextId = Math.floor(Math.random() * curNodes.length);\r\n      let tmp = nextId;\r\n      nextId = curNodes[nextId];\r\n      curNodes.splice(tmp, 1);\r\n      console.log(curNodes);\r\n    }\r\n\r\n    if ((nextId == 0 || nextId == 1) && this.state.scene.id > 1) {\r\n      setBackground.backgroundImage = '';\r\n      curNodes = nodesArr;\r\n      counter = 0;\r\n      lives = 3;\r\n      mana = 50;\r\n      glory = 50; \r\n    }\r\n\r\n    getScene(nextId)\r\n      .then((response) => {\r\n        const { data } = response;\r\n        //setScene(data);\r\n        if (data.bonus) {\r\n          lives += data.bonus.lives;\r\n          mana += data.bonus.mana;\r\n          glory += data.bonus.glory;\r\n        }\r\n\r\n        this.setState({ scene: data });\r\n        this.read();\r\n        counter++;\r\n        console.log('COUNTER = ', counter);\r\n\r\n        if (counter > 0 && data.img) {\r\n          this.setBackgrounds(data.img);\r\n        } \r\n      });\r\n  }\r\n\r\n  neededText(scene) {\r\n    if (scene.text) {\r\n      return scene.text;\r\n    }\r\n    if (characterID === 'joy'){\r\n      return scene.textj;\r\n    }\r\n    if (characterID === 'eva'){\r\n      return scene.texta;\r\n    }\r\n    return scene.texts;\r\n  }\r\n\r\n  render() {\r\n\r\n    /*\r\n    const [scene, setScene] = useState(null);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    const [backgroundImage, setBackgroundImage] = useState({background : ''});\r\n\r\n    const fetchedData = async (id) => {\r\n       return await getScene(id);\r\n    }\r\n    \r\n    useEffect(() => {\r\n       fetchedData(currentId).then((response) => {\r\n           console.log(response);\r\n           const { data } = response;\r\n           setScene(data);\r\n       })\r\n    }, []);\r\n    */\r\n\r\n     const { scene, backgroundImage } = this.state;\r\n\r\n    /*изначально было setBackgroundImage({background : `url(${API_URL}/${curImg}.png) center no-repeat`});*/\r\n\r\n    if (scene) {\r\n      if (scene.options) {\r\n\r\n        if (counter == 0) {\r\n          return (\r\n            < >\r\n              <Col type=\"calc\" offsetS={1} offsetM={2} offsetL={3} offsetXL={4} sizeS={1} sizeM={2} sizeL={3} sizeXL={4} />\r\n              <Headline1> { this.neededText(scene) } </Headline1>\r\n              {\r\n                scene.options.map((item) => {\r\n                  return (\r\n                    <Row>\r\n                      <Button style={{ marginBottom: '1rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.add_note({choice: item.text}) }>\r\n                        {item.text}\r\n                      </Button>\r\n                    </Row>\r\n                  );\r\n                })\r\n              }\r\n            </>\r\n          );\r\n        }\r\n\r\n        if (counter < 7) {\r\n          return(\r\n            // <Container styles={darkSber} >\r\n                <Row>\r\n                  <Col className='centerPic'>\r\n                    <div style={backgroundImage} className = 'img-Wrapper'>\r\n                       {/* <img  src={API_URL + '/' + scene.img + '.png' } height={'450'} width={'450'} /> */}\r\n                    </div>\r\n                   \r\n                  </Col>\r\n                  <Col className = 'centerBut' type=\"rel\" offsetS={0} offsetM={0} offsetL={1} offsetXL={0} sizeS={4} sizeM={6} sizeL={6} sizeXL={6}>\r\n                    <Headline1 className='centerText'> { this.neededText(scene) } </Headline1>\r\n                    {\r\n                      scene.options.map((item) => {\r\n                        return (\r\n                          <Row type=\"rel\" sizeS={4} sizeM={6} sizeL={6} sizeXL={6} >\r\n                            <Button  style={{ marginBottom: '1rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.add_note({choice: item.text}) }>\r\n                              {item.text}\r\n                            </Button>\r\n                          </Row>\r\n                        );\r\n                      })\r\n                    }\r\n                  </Col>\r\n            </Row>\r\n              //{ console.log('values: ', lives, ' ', light, ' ', darkness, ' ', glory) }\r\n            // </Container>\r\n          );\r\n        }\r\n\r\n        return(\r\n          // <Container styles={darkSber} >\r\n              <Row>\r\n                <Col className='centerPic'>\r\n                  <div style={backgroundImage} className = 'img-Wrapper'>\r\n                     {/* <img  src={API_URL + '/' + scene.img + '.png' } height={'450'} width={'450'} /> */}\r\n                  </div>\r\n                 \r\n                </Col>\r\n                  <Col className = 'centerBut' type=\"rel\" offsetS={0} offsetM={0} offsetL={1} offsetXL={0} sizeS={4} sizeM={6} sizeL={6} sizeXL={6}>\r\n                  <Headline1 className='centerText'> { this.neededText(scene) } </Headline1>\r\n                  <Indicators lives={lives} mana={mana} glory={glory} />\r\n                  {\r\n                    scene.options.map((item) => {\r\n                      return (\r\n                        <Row type=\"rel\" sizeS={4} sizeM={6} sizeL={6} sizeXL={6}>\r\n                          <Button style={{ marginBottom: '1rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.add_note({choice: item.text}) }>\r\n                            {item.text}\r\n                          </Button>\r\n                        </Row>\r\n                      );\r\n                    })\r\n                  }\r\n                  </Col>\r\n          </Row>\r\n            //{ console.log('values: ', lives, ' ', light, ' ', darkness, ' ', glory) }\r\n          // </Container>\r\n        );\r\n      }\r\n    } else {\r\n      return (<Spinner />);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Scene;","import React from \"react\";\r\n\r\nimport { Row } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Toast } from '@sberdevices/plasma-ui';\r\nimport { setConstantValue } from \"typescript\";\r\n\r\nimport './centerIndicators.css'\r\n\r\nclass Indicators extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className = 'centerInd'>\r\n                <Toast text={`Количество жизней: ${this.props.lives}💖`} />\r\n                <Toast text={`Мана: ${this.props.mana}🧙`} />\r\n                <Toast text={`Слава: ${this.props.glory}🎺`} />\r\n            </Row>\r\n        );\r\n    }\r\n  }\r\n\r\nexport default Indicators;","import React from \"react\";\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\nimport { Container } from '@sberdevices/plasma-ui/components/Grid';\r\n\r\nimport \"./App.css\";\r\nimport Scene from './components/scene';\r\nimport { TaskList } from './pages/TaskList';\r\n\r\n\r\n\r\nexport class App extends React.Component {\r\n\r\n  render() {\r\n    console.log('render');\r\n    return (\r\n      <Container>\r\n\r\n        <Scene />\r\n\r\n      </Container>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","// GlobalStyle.tsx\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeStyle = createGlobalStyle(darkSber);\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeStyle />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './GlobalStyle'; // Тема оформления (цветовая схема)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DeviceThemeProvider>\r\n      <GlobalStyle />\r\n      <App />\r\n    </DeviceThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 64;"],"sourceRoot":""}