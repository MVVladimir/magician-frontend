{"version":3,"sources":["components/AddTask.jsx","services/APIHelper.js","components/scene.jsx","components/indicators.js","App.jsx","reportWebVitals.ts","GlobalStyle.js","index.tsx","../node_modules/typescript/lib sync"],"names":["React","Component","API_URL","nextId","a","axios","get","obj","getScene","characterID","nodesArr","curNodes","Indicators","props","className","text","this","lives","mana","glory","YOUWIN","firstRepeat","counter","pictures","setBackground","backgroundImage","Scene","getState","console","log","state","notes","scene","background","assistant","getStateForAssistant","createAssistant","on","event","type","character","id","setState","action","dispatchAssistantAction","response","data","slice","length","read","min","max","item_selector","items","texts","texta","textj","userSuggest","options","Math","ceil","floor","random","choice","add_note","newScene","sendData","action_id","isChanged","toLowerCase","forEach","arr","index","moveTo","item","sendException","curImg","push","string","reverse","pic","tmp","splice","then","bonus","img","setBackgrounds","offsetS","offsetM","offsetL","offsetXL","sizeS","sizeM","sizeL","sizeXL","neededText","map","Button","scaleOnInteraction","scaleOnHover","scaleOnPress","style","marginBottom","width","stretch","size","onClick","Spinner","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","gradient","ThemeStyle","darkSber","GlobalStyle","ReactDOM","render","StrictMode","Device","document","getElementById","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.842581f2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../App.css\";\r\n\r\n\r\nexport class AddTask extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      note: '',\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { onAdd } = this.props;\r\n\r\n    return (\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          onAdd(this.state.note);\r\n          this.setState({\r\n            note: '',\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          className   = \"add-task\"\r\n          type        = \"text\"\r\n          placeholder = \"Add Note\"\r\n          value       = { this.state.note }\r\n          onChange    = {({ target: { value } }) => this.setState({\r\n            note: value,\r\n          })}\r\n          required\r\n          autoFocus\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://magicianapp.herokuapp.com\";\r\n// const API_URL = \"http://localhost:3000\";\r\n\r\nasync function getScene(nextId) {\r\n    const obj = await axios.get(`${API_URL}/nodes/${nextId}`);\r\n    return obj;\r\n}\r\n\r\nexport default getScene;\r\nexport { API_URL };","import {TaskList} from '../pages/TaskList';\r\nimport getScene, { API_URL } from '../services/APIHelper.js'\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\n\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes';\r\nimport { Button } from '@sberdevices/ui/components/Button/Button';\r\nimport { Container, Row, Col } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Image } from '@sberdevices/ui/components/Image/Image';\r\nimport { Spinner } from '@sberdevices/plasma-ui/components/Spinner'\r\nimport { Headline1 } from '@sberdevices/plasma-ui';\r\n\r\nimport Indicators from './indicators'\r\nimport './scene.css';\r\nimport './centerButtons.css'\r\nimport './centerText.css'\r\nimport './centerPic.css'\r\nimport './sthg.css'\r\nimport './startText.css'\r\nimport './marginIndicators.css'\r\nimport './buttonText.css'\r\nimport './lastBut.css'\r\nimport './centerSpinner.css'\r\nimport { createMethodSignature } from 'typescript';\r\n\r\nconst YOUDIED = 99999;\r\nconst YOUWIN = 100000;\r\n\r\nlet characterID;\r\n\r\nlet firstRepeat = false;\r\n\r\nlet lives = 3;\r\nlet mana = 50;\r\nlet glory = 50;\r\n\r\nlet counter = 0;\r\nlet currentId = 0;\r\nlet pictures = [];\r\n\r\nlet nodesArr;\r\nlet curNodes;\r\n\r\nconst setBackground = {\r\n  backgroundImage: ''\r\n}\r\n\r\nconst initializeAssistant = (getState/*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\n\r\nconst fetchedData = async (id) => {\r\n  return await getScene(id);\r\n}\r\n\r\nexport class Scene extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('constructor');\r\n\r\n    //this.value = 0;\r\n\r\n    this.state = {\r\n      notes: [],\r\n      scene:           null,\r\n      backgroundImage: { background: '' }\r\n    };\r\n\r\n    this.assistant = initializeAssistant(() => this.getStateForAssistant() );\r\n    this.assistant.on(\"data\", (event/*: any*/) => {\r\n      switch (event.type) {\r\n        case 'character':\r\n          characterID = event.character.id;\r\n          this.setState({scene: this.state.scene, character: characterID});\r\n          console.log(\"CHARACTER= \", characterID);\r\n        // case 'action':\r\n        //   console.log(`assistant.on(data)`, event);\r\n        //   const { action } = event\r\n        //   this.dispatchAssistantAction(action);\r\n      }\r\n      console.log(`assistant.on(data)`, event);\r\n      const { action } = event\r\n      this.dispatchAssistantAction(action);\r\n    });\r\n    this.assistant.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const response = await getScene(currentId);\r\n    console.log(response);\r\n    const { data } = response;\r\n\r\n    if (data.nodesArr) {\r\n      nodesArr = data.nodesArr.slice(0, data.nodesArr.length);\r\n      console.log('nodesArr', nodesArr);\r\n      curNodes = nodesArr.slice(0, nodesArr.length);\r\n    }\r\n\r\n    this.setState({ scene: data , character : characterID});\r\n    this.read();\r\n  }\r\n\r\n  getStateForAssistant () {\r\n    console.log('getStateForAssistant: this.state:', this.state);\r\n\r\n    function getRandomInt(min, max) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается\r\n    }\r\n    \r\n    // const rand =  Math.floor(Math.random() * this.state.scene.options.length);\r\n    // const rand = this.state.scene.options.length == 1 ? 0 :  Math.floor(Math.random() * this.state.scene.options.length);\r\n\r\n    const state = {\r\n      item_selector: {\r\n        items: { \r\n          text : this.state.scene.text, \r\n          texts : this.state.scene.texts,\r\n          texta : this.state.scene.texta,\r\n          textj : this.state.scene.textj,\r\n          // userSuggest: this.state.scene.options[rand].text[0]\r\n          userSuggest: this.state.scene.options[getRandomInt(0, this.state.scene.options.length)].text[0]\r\n         }\r\n      }\r\n    };\r\n\r\n    console.log('getStateForAssistant: state:', state)\r\n    return state;\r\n  }\r\n\r\n  dispatchAssistantAction (action) {\r\n    console.log('dispatchAssistantAction', action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case 'add_note':\r\n          console.log('add_note', action, 'action.choice = ', action.choice);\r\n          return this.add_note(action);\r\n\r\n        \r\n        case 'read':\r\n          return this.read();\r\n\r\n        case 'newScene':\r\n          return this.newScene();\r\n\r\n        /*\r\n        case 'delete_note':\r\n          return this.delete_note(action);\r\n        default:\r\n          throw new Error();\r\n        */\r\n      }\r\n    }\r\n  }\r\n\r\n  read () {\r\n    this.assistant.sendData( { action : { action_id : 'read' } } );\r\n  }\r\n\r\n  newScene () {\r\n    this.assistant.sendData( { action : { action_id : 'newScene' } } );\r\n  }\r\n\r\n  sendException() {\r\n    this.assistant.sendData( { action : { action_id : 'noMatch' } } );\r\n  }\r\n\r\n  add_note (action) {\r\n    let choice = action.choice;\r\n    let isChanged = false;\r\n\r\n    choice = choice.toLowerCase();\r\n    \r\n    console.log(choice);\r\n\r\n    if (choice == 'один' || choice == 'первый' || choice == 'первое' || choice == 'первую') {\r\n      choice = 1;\r\n    }\r\n    if (action.choice == 'два' || choice == 'второй'|| choice == 'второе' || choice == 'вторую') {\r\n      choice = 2;\r\n    }\r\n    if (action.choice == 'три' || choice == 'третий'|| choice == 'третье' || choice == 'третью') {\r\n      choice = 3;\r\n    }\r\n    if (action.choice == 'четыре' || choice == 'четвертый'|| choice == 'четвертое' || choice == 'четвертую') {\r\n      choice = 4;\r\n    }\r\n\r\n    this.state.scene.options.forEach((arr, index) => {\r\n\r\n      if (index + 1 === choice) {\r\n        this.moveTo(arr.id);\r\n        isChanged = true;\r\n      }\r\n\r\n      console.log('ARR = ' + arr.text);\r\n\r\n      arr.text.forEach((item) => {\r\n        if (item.toLowerCase() === choice) {\r\n          this.moveTo(arr.id);\r\n          isChanged = true;\r\n        }\r\n      })\r\n    })\r\n\r\n    if (!isChanged) {\r\n      this.sendException();\r\n    }\r\n    //return this.state;\r\n  }\r\n\r\n  /*add_note (action) {\r\n    console.log('add_note', action);\r\n    this.setState({\r\n      notes: [\r\n        ...this.state.notes,\r\n        {\r\n          id:        Math.random().toString(36).substring(7),\r\n          title:     action.note,\r\n          completed: false,\r\n        },\r\n      ],\r\n    })\r\n  }*/\r\n\r\n  setBackgrounds (curImg) {\r\n    pictures.push(curImg);\r\n    //debugger;\r\n    let string = ``;\r\n    pictures.reverse();\r\n    pictures.forEach((pic, index) => {\r\n      string = string + `url(${API_URL}/${pic}.png) center no-repeat`;\r\n      if (index < pictures.length - 1){\r\n        string = string + ',';\r\n      }\r\n    });\r\n    //setBackgroundImage({background : string});\r\n    this.setState({ backgroundImage: {background : string}, character: characterID})\r\n    pictures.reverse();\r\n  }\r\n  \r\n  moveTo(nextId) {\r\n    //fetchedData(nextId)\r\n    counter++;\r\n\r\n    if ((lives <= 0 || mana <= 0 || glory <= 0) && this.state.scene.id != YOUDIED ) {\r\n      nextId = YOUDIED;\r\n    }\r\n\r\n    if ((lives > 0 && (mana >= 200 || glory >= 200)) && this.state.scene.id != YOUWIN ) {\r\n      nextId = YOUWIN;\r\n    }\r\n\r\n    console.log('NEXT IS ', nextId);\r\n    console.log('ARRAY = ', curNodes);\r\n\r\n    if (!nextId) {\r\n\r\n      if (curNodes.length == 0) {\r\n        console.log('NODES ARR = ', nodesArr);\r\n        if (!firstRepeat) {\r\n          nextId = 12321;\r\n          firstRepeat = true;\r\n\r\n          console.log('REPEAT POINT NODES ARR' ,nodesArr);\r\n          curNodes = nodesArr.slice(0, nodesArr.length);\r\n          console.log('REPEAT POINT CUR NODS' ,curNodes);\r\n        }\r\n        else{\r\n          console.log('REPEAT POINT NODES ARR' ,nodesArr);\r\n          curNodes = nodesArr.slice(0, nodesArr.length);\r\n          console.log('REPEAT POINT CUR NODS' ,curNodes);\r\n          \r\n          nextId = Math.floor(Math.random() * curNodes.length);\r\n          let tmp = nextId;\r\n          nextId = curNodes[nextId];\r\n          curNodes.splice(tmp, 1);\r\n          console.log('NEXT ID = ', nextId);\r\n        }\r\n      }\r\n      else {\r\n        nextId = Math.floor(Math.random() * curNodes.length);\r\n        let tmp = nextId;\r\n        nextId = curNodes[nextId];\r\n        curNodes.splice(tmp, 1);\r\n        console.log(curNodes);\r\n      }\r\n    }\r\n\r\n    if ((nextId == 1) && this.state.scene.id > 1) {\r\n      setBackground.backgroundImage = '';\r\n      curNodes = nodesArr.slice(0, nodesArr.length);\r\n      counter = 1;\r\n      lives = 3;\r\n      mana = 50;\r\n      glory = 50; \r\n    }\r\n\r\n    getScene(nextId)\r\n      .then((response) => {\r\n        const { data } = response;\r\n        //setScene(data);\r\n        if (data.bonus) {\r\n          lives += data.bonus.lives;\r\n          mana += data.bonus.mana;\r\n          glory += data.bonus.glory;\r\n        }\r\n\r\n        this.setState({ scene: data , character : characterID});\r\n        this.newScene();\r\n        // this.read();\r\n        // counter++;\r\n        console.log('COUNTER = ', counter);\r\n\r\n        if (counter > 0 && data.img) {\r\n          this.setBackgrounds(data.img);\r\n        } \r\n      });\r\n  }\r\n\r\n  neededText(scene) {\r\n    if (scene.text) {\r\n      return scene.text;\r\n    }\r\n    if (characterID === 'joy'){\r\n      return scene.textj;\r\n    }\r\n    if (characterID === 'eva'){\r\n      return scene.texta;\r\n    }\r\n    return scene.texts;\r\n  }\r\n\r\n  render() {\r\n\r\n    /*\r\n    const [scene, setScene] = useState(null);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    const [backgroundImage, setBackgroundImage] = useState({background : ''});\r\n\r\n    const fetchedData = async (id) => {\r\n       return await getScene(id);\r\n    }\r\n    \r\n    useEffect(() => {\r\n       fetchedData(currentId).then((response) => {\r\n           console.log(response);\r\n           const { data } = response;\r\n           setScene(data);\r\n       })\r\n    }, []);\r\n    */\r\n\r\n     const { scene, backgroundImage } = this.state;\r\n\r\n    if (scene) {\r\n      if (scene.options) {\r\n\r\n        if (counter == 0) {\r\n          return (\r\n            < >\r\n              <Col type=\"calc\" offsetS={1} offsetM={2} offsetL={3} offsetXL={4} sizeS={1} sizeM={2} sizeL={3} sizeXL={4} />\r\n              <h1 className='textWrapper'> { this.neededText(scene) } </h1>\r\n              {\r\n                scene.options.map((item) => {\r\n                  return (\r\n                    <Row>\r\n                      <Button scaleOnInteraction = {false} scaleOnHover = {false} scaleOnPress = {false} style={{ marginBottom: '5rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.add_note({choice: item.text[0]}) }>\r\n                      <div className='butTextWrapper'> {item.text[0]} </div>\r\n                      </Button>\r\n                    </Row>\r\n                  );\r\n                })\r\n              }\r\n            </>\r\n          );\r\n        }\r\n\r\n        if (counter < 7) {\r\n          return(\r\n                <Row className='rowWrapper'>\r\n                  <Col sizeS={4} sizeM={3} sizeL={4} sizeXL={6} className='centerPic'>\r\n                    <div style={backgroundImage} className = 'img-Wrapper'>\r\n                    </div>\r\n                   \r\n                  </Col>\r\n                  <Col className = 'centerBut' type=\"rel\" offsetS={0} offsetM={0} offsetL={1} offsetXL={0} sizeS={4} sizeM={3} sizeL={3} sizeXL={6}>\r\n                    <h1 className='centerText'> { this.neededText(scene) } </h1>\r\n                    {\r\n                      scene.options.map((item) => {\r\n                        return (\r\n                          <Row>\r\n                            <Button scaleOnInteraction = {false} scaleOnHover = {false} scaleOnPress = {false} style={{ marginBottom: '10px', width: '100%' }} stretch={true} size=\"s\" onClick={ () => this.add_note({choice: item.text[0]}) }>\r\n                            <div className='butTextWrapper'> {item.text[0]} </div>\r\n                            </Button>\r\n                          </Row>\r\n                        );\r\n                      })\r\n                    }\r\n                  </Col>\r\n            </Row>\r\n          );\r\n        }\r\n\r\n        return(\r\n          <>\r\n              <Row className='rowWrapper'>\r\n                <Col sizeS={4} sizeM={3} sizeL={4} sizeXL={6} className='centerPic'>\r\n                  <div style={backgroundImage} className = 'img-Wrapper'>\r\n                  </div>\r\n                </Col>\r\n                <Col className = 'centerBut' type=\"rel\" offsetS={0} offsetM={0} offsetL={1} offsetXL={0} sizeS={4} sizeM={3} sizeL={3} sizeXL={6}>\r\n                  <h1 className='centerText'> { this.neededText(scene) } </h1>\r\n                  <Indicators lives={lives} mana={mana} glory={glory} />\r\n                  {\r\n                    scene.options.map((item) => {\r\n                      return (\r\n                        <Row type=\"rel\" sizeS={4} sizeM={6} sizeL={6} sizeXL={6}>\r\n                          <Button scaleOnInteraction = {false} scaleOnHover = {false} scaleOnPress = {false} style={{ marginBottom: '10px', width: '100%' }} stretch={true} size=\"s\" onClick={ () => this.add_note({choice: item.text[0]}) }>\r\n                            <div className='butTextWrapper'> {item.text[0]} </div>\r\n                          </Button>\r\n                        </Row>\r\n                      );\r\n                    })\r\n                  }\r\n                  </Col>\r\n              </Row>\r\n            </>\r\n        );\r\n      }\r\n    } else {\r\n      return (<Spinner className='spinnerWrapper'/>);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Scene;","import React from \"react\";\r\n\r\nimport { Row } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Toast } from '@sberdevices/plasma-ui';\r\nimport { setConstantValue } from \"typescript\";\r\n\r\nimport './centerIndicators.css'\r\nimport './marginIndicators.css'\r\n\r\nclass Indicators extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className = 'centerInd'>\r\n                <div className='indWrapper'> <Toast text={`Количество жизней: ${this.props.lives}💖`} /> </div>\r\n                <div className='indWrapper'> <Toast text={`Мана: ${this.props.mana}🧙`} /> </div>\r\n                <div className='indWrapper'> <Toast text={`Слава: ${this.props.glory}🎺`} /> </div>\r\n            </Row>\r\n        );\r\n    }\r\n  }\r\n\r\nexport default Indicators;","import React from \"react\";\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\nimport { Container } from '@sberdevices/plasma-ui/components/Grid';\r\n\r\nimport \"./App.css\";\r\nimport Scene from './components/scene';\r\nimport { TaskList } from './pages/TaskList';\r\n\r\n\r\n\r\nexport class App extends React.Component {\r\n\r\n  render() {\r\n    console.log('render');\r\n    return (\r\n      <Container>\r\n\r\n        <Scene />\r\n\r\n      </Container>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","// GlobalStyle.tsx\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeStyle = createGlobalStyle(darkSber);\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeStyle />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './GlobalStyle'; // Тема оформления (цветовая схема)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DeviceThemeProvider>\r\n      <GlobalStyle />\r\n      <App />\r\n    </DeviceThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 64;"],"sourceRoot":""}