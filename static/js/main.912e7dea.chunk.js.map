{"version":3,"sources":["components/AddTask.jsx","services/APIHelper.js","components/scene.jsx","App.jsx","reportWebVitals.ts","GlobalStyle.js","index.tsx"],"names":["React","Component","API_URL","nextId","a","axios","get","obj","getScene","counter","pictures","Scene","props","getState","console","log","state","notes","scene","backgroundImage","background","assistant","getStateForAssistant","createAssistant","on","event","action","dispatchAssistantAction","response","data","this","setState","type","choice","add_note","options","forEach","item","index","text","id","moveTo","map","note","completed","filter","curImg","push","string","reverse","pic","length","then","setBackgrounds","img","styles","darkSber","size","style","className","src","height","width","offset","Button","marginBottom","stretch","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","gradient","ThemeStyle","GlobalStyle","ReactDOM","render","StrictMode","Device","document","getElementById"],"mappings":"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","file":"static/js/main.912e7dea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../App.css\";\r\n\r\n\r\nexport class AddTask extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      note: '',\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { onAdd } = this.props;\r\n\r\n    return (\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          onAdd(this.state.note);\r\n          this.setState({\r\n            note: '',\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          className   = \"add-task\"\r\n          type        = \"text\"\r\n          placeholder = \"Add Note\"\r\n          value       = { this.state.note }\r\n          onChange    = {({ target: { value } }) => this.setState({\r\n            note: value,\r\n          })}\r\n          required\r\n          autoFocus\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://magicianapp.herokuapp.com\";\r\n\r\nasync function getScene(nextId) {\r\n    const obj = await axios.get(`${API_URL}/nodes/${nextId}`);\r\n    return obj;\r\n}\r\n\r\nexport default getScene;\r\nexport { API_URL };","import {TaskList} from '../pages/TaskList';\r\nimport getScene, { API_URL } from '../services/APIHelper.js'\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\n\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes';\r\nimport { Button } from '@sberdevices/ui/components/Button/Button';\r\nimport { Container, Row, Col } from '@sberdevices/plasma-ui/components/Grid';\r\nimport { Image } from '@sberdevices/ui/components/Image/Image'\r\n\r\nimport './scene.css';\r\n\r\nlet currentId = 1;\r\n\r\nlet counter = 0;\r\nlet pictures = [];\r\n\r\nconst setBackground = {\r\n  backgroundImage: ''\r\n}\r\n\r\nconst initializeAssistant = (getState/*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\n\r\nconst fetchedData = async (id) => {\r\n  return await getScene(id);\r\n}\r\n\r\nexport class Scene extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('constructor');\r\n\r\n    //this.value = 0;\r\n\r\n    this.state = {\r\n      notes: [],\r\n    //}\r\n    //this.state = {\r\n      scene:           null,\r\n      backgroundImage: { background: '' }\r\n    };\r\n\r\n    this.assistant = initializeAssistant(() => this.getStateForAssistant() );\r\n    this.assistant.on(\"data\", (event/*: any*/) => {\r\n      console.log(`assistant.on(data)`, event);\r\n      const { action } = event\r\n      this.dispatchAssistantAction(action);\r\n    });\r\n    this.assistant.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const response = await getScene(currentId);\r\n    console.log(response);\r\n    const { data } = response;\r\n    this.setState({ scene: data });\r\n  }\r\n\r\n  getStateForAssistant () {\r\n    console.log('getStateForAssistant: this.state:', this.state)\r\n    /*const state = {\r\n      item_selector: {\r\n        items: this.state.notes.map(\r\n          ({ id, title }, index) => ({\r\n            number: index + 1,\r\n            id,\r\n            title,\r\n          })\r\n        ),\r\n      },\r\n    };\r\n\r\n    console.log('getStateForAssistant: state:', state)\r\n    return state;*/\r\n    return this.state;\r\n  }\r\n\r\n  dispatchAssistantAction (action) {\r\n    console.log('dispatchAssistantAction', action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case 'add_note':\r\n          console.log('add_note', action, 'action.choice = ', action.choice);\r\n          return this.add_note(action);\r\n\r\n        /*\r\n        case 'done_note':\r\n          return this.done_note(action);\r\n\r\n        case 'delete_note':\r\n          return this.delete_note(action);\r\n\r\n        default:\r\n          throw new Error();\r\n        */\r\n      }\r\n    }\r\n  }\r\n\r\n  add_note (action) {\r\n    let choice = action.choice;\r\n\r\n    if (choice == 'один' || choice == 'первый' || choice == 'первое') {\r\n      choice = 1;\r\n    }\r\n    if (action.choice == 'два' || choice == 'второй'|| choice == 'второе') {\r\n      choice = 2;\r\n    }\r\n    if (action.choice == 'три' || choice == 'третий'|| choice == 'третье') {\r\n      choice = 3;\r\n    }\r\n    if (action.choice == 'четыре' || choice == 'четвертый'|| choice == 'четвертое') {\r\n      choice = 4;\r\n    }\r\n\r\n    this.state.scene.options.forEach((item, index) => {\r\n      console.log('index = ', index, 'choice = ', choice);\r\n      if ((item.text === choice) || (index + 1 === choice)) {\r\n        console.log('movedTo', item.id);\r\n        this.moveTo(item.id);\r\n      }\r\n    })\r\n    //return this.state;\r\n  }\r\n\r\n  /*add_note (action) {\r\n    console.log('add_note', action);\r\n    this.setState({\r\n      notes: [\r\n        ...this.state.notes,\r\n        {\r\n          id:        Math.random().toString(36).substring(7),\r\n          title:     action.note,\r\n          completed: false,\r\n        },\r\n      ],\r\n    })\r\n  }*/\r\n\r\n  done_note (action) {\r\n    console.log('done_note', action);\r\n    this.setState({\r\n      notes: this.state.notes.map((note) =>\r\n        (note.id === action.id)\r\n        ? { ...note, completed: !note.completed }\r\n        : note\r\n      ),\r\n    })\r\n  }\r\n\r\n  delete_note (action) {\r\n    console.log('delete_note', action);\r\n    this.setState({\r\n      notes: this.state.notes.filter(({ id }) => id !== action.id),\r\n    })\r\n  }\r\n\r\n  setBackgrounds (curImg) {\r\n    pictures.push(curImg);\r\n    //debugger;\r\n    let string = ``;\r\n    pictures.reverse();\r\n    pictures.forEach((pic, index) => {\r\n      string = string + `url(${API_URL}/${pic}.png) center no-repeat`;\r\n      if (index < pictures.length - 1){\r\n        string = string + ',';\r\n      }\r\n    });\r\n    //setBackgroundImage({background : string});\r\n    this.setState({ backgroundImage: {background : string}})\r\n    pictures.reverse();\r\n  }\r\n  \r\n  moveTo(nextId) {\r\n    //fetchedData(nextId)\r\n    getScene(nextId)\r\n      .then((response) => {\r\n        const { data } = response;\r\n        //setScene(data);\r\n        this.setState({ scene: data });\r\n      })\r\n    counter++;\r\n    if (counter > 2) {\r\n      this.setBackgrounds(this.state.scene.img);\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    //const [scene, setScene] = useState(null);\r\n    //const [scene, setScene] = useState(null);\r\n\r\n    //const [backgroundImage, setBackgroundImage] = useState({background : ''});\r\n\r\n    //const fetchedData = async (id) => {\r\n    //    return await getScene(id);\r\n    //}\r\n    //\r\n    //useEffect(() => {\r\n    //    fetchedData(currentId).then((response) => {\r\n    //        console.log(response);\r\n    //        const { data } = response;\r\n    //        setScene(data);\r\n    //    })\r\n    //}, []);\r\n\r\n     const { scene, backgroundImage } = this.state;\r\n\r\n    /*изначально было setBackgroundImage({background : `url(${API_URL}/${curImg}.png) center no-repeat`});*/\r\n\r\n\r\n\r\n    if (scene) {\r\n      if (scene.options) {\r\n        return(\r\n          <Container styles={darkSber} >\r\n\r\n              <Row>\r\n                <Col  type=\"calc\" size={3}>\r\n                  <div style={backgroundImage} className = 'img-Wrapper'> <img  src={API_URL + '/' + scene.img + '.png' } height={'450'} width={'450'} /> </div>\r\n                </Col>\r\n                 \r\n                \r\n                <Col  type=\"calc\" offset={2} size={5}>\r\n                  <h1> { scene.text   } </h1>\r\n                  {\r\n                    scene.options.map((item) => {\r\n                      return (\r\n                        <Row>\r\n                          <Button style={{ marginBottom: '1rem', width: '100%' }} stretch={true} size=\"l\" onClick={ () => this.moveTo(item.id) }>\r\n                            {item.text}\r\n                          </Button>\r\n                        </Row>\r\n                      \r\n                      );\r\n                    })\r\n                  }\r\n                </Col>\r\n\r\n            </Row>\r\n          </Container>\r\n        );\r\n      } else {\r\n        return(\r\n          <Container styles={darkSber} >\r\n            <img src={API_URL + '/' + scene.img + '.png' } height={'450'} width={'450'} />\r\n            <h1> { scene.text } </h1>\r\n          </Container>\r\n        )\r\n      }\r\n\r\n    } else {\r\n      return <h1>Nothing...</h1>\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Scene;\r\n","import React from \"react\";\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\nimport { Container } from '@sberdevices/plasma-ui/components/Grid';\r\n\r\nimport \"./App.css\";\r\nimport Scene from './components/scene';\r\nimport { TaskList } from './pages/TaskList';\r\n\r\n\r\n\r\nexport class App extends React.Component {\r\n\r\n  render() {\r\n    console.log('render');\r\n    return (\r\n      <Container>\r\n\r\n        <Scene />\r\n\r\n      </Container>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","// GlobalStyle.tsx\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeStyle = createGlobalStyle(darkSber);\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeStyle />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './GlobalStyle'; // Тема оформления (цветовая схема)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DeviceThemeProvider>\r\n      <GlobalStyle />\r\n      <App />\r\n    </DeviceThemeProvider>,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}